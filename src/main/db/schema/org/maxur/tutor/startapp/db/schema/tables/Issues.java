/**
 * This class is generated by jOOQ
 */
package org.maxur.tutor.startapp.db.schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.maxur.tutor.startapp.db.schema.Keys;
import org.maxur.tutor.startapp.db.schema.Public;
import org.maxur.tutor.startapp.db.schema.tables.records.IssuesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issues extends TableImpl<IssuesRecord> {

    private static final long serialVersionUID = 1745504492;

    /**
     * The reference instance of <code>PUBLIC.ISSUES</code>
     */
    public static final Issues ISSUES = new Issues();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssuesRecord> getRecordType() {
        return IssuesRecord.class;
    }

    /**
     * The column <code>PUBLIC.ISSUES.ISSUE_ID</code>.
     */
    public final TableField<IssuesRecord, String> ISSUE_ID = createField("ISSUE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ISSUES.NAME</code>.
     */
    public final TableField<IssuesRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ISSUES.DESCRIPTION</code>.
     */
    public final TableField<IssuesRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.ISSUES.PROJECT_ID</code>.
     */
    public final TableField<IssuesRecord, String> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.ISSUES</code> table reference
     */
    public Issues() {
        this("ISSUES", null);
    }

    /**
     * Create an aliased <code>PUBLIC.ISSUES</code> table reference
     */
    public Issues(String alias) {
        this(alias, ISSUES);
    }

    private Issues(String alias, Table<IssuesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issues(String alias, Table<IssuesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IssuesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IssuesRecord>> getKeys() {
        return Arrays.<UniqueKey<IssuesRecord>>asList(Keys.CONSTRAINT_8, Keys.CONSTRAINT_81);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<IssuesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IssuesRecord, ?>>asList(Keys.PROJECT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Issues as(String alias) {
        return new Issues(alias, this);
    }

    /**
     * Rename this table
     */
    public Issues rename(String name) {
        return new Issues(name, null);
    }
}
