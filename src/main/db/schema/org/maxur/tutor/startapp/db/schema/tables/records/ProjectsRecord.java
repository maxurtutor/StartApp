/**
 * This class is generated by jOOQ
 */
package org.maxur.tutor.startapp.db.schema.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.maxur.tutor.startapp.db.schema.tables.Projects;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectsRecord extends UpdatableRecordImpl<ProjectsRecord> implements Record2<String, String> {

    private static final long serialVersionUID = -518885802;

    /**
     * Setter for <code>PUBLIC.PROJECTS.PROJECT_ID</code>.
     */
    public ProjectsRecord setProjectId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.PROJECTS.PROJECT_ID</code>.
     */
    public String getProjectId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.PROJECTS.NAME</code>.
     */
    public ProjectsRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>PUBLIC.PROJECTS.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Projects.PROJECTS.PROJECT_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Projects.PROJECTS.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getProjectId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectsRecord value1(String value) {
        setProjectId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectsRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectsRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProjectsRecord
     */
    public ProjectsRecord() {
        super(Projects.PROJECTS);
    }

    /**
     * Create a detached, initialised ProjectsRecord
     */
    public ProjectsRecord(String projectId, String name) {
        super(Projects.PROJECTS);

        set(0, projectId);
        set(1, name);
    }
}
